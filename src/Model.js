/*
This file was generated by https://github.com/pmndrs/gltfjsx and then
customized manually. It uses drei's new useAnimations hook which extracts
all actions and sets up a THREE.AnimationMixer for it so that you don't have to.
All of the assets actions, action-names and clips are available in its output.
*/

import React, { useEffect, useState, useMemo } from "react"
import { useGLTF, useTexture, useCursor, useAnimations } from "@react-three/drei"
import { useGraph } from "@react-three/fiber"
import { a, useSpring } from "@react-spring/three"
import { SkeletonUtils } from "three-stdlib"

export default function Model({ pose, ...props }) {
  // Fetch model and a separate texture
  const { scene, animations } = useGLTF("/jeff_anim.glb")
  const texture = useTexture("/stacy.jpg")

  // Skinned meshes cannot be re-used in threejs without cloning them
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene])
  // useGraph creates two flat object collections for nodes and materials
  const { nodes } = useGraph(clone)

  // Extract animation actions
  const { ref, actions, names } = useAnimations(animations)

  // Hover and animation-index states
  const [hovered, setHovered] = useState(false)
  const [index, setIndex] = useState(pose || 0)
  // Animate the selection halo
  const { color, scale } = useSpring({ scale: hovered ? [1.15, 1.15, 1] : [1, 1, 1], color: hovered ? "hotpink" : "aquamarine" })
  // Change cursor on hover-state
  useCursor(hovered)

  // Change animation when the index changes
  useEffect(() => {
    // Reset and fade in animation after an index has been changed
    console.log(`Available animations: ${names}`)
    console.log(`Current index: ${index}`)
    console.log(`Available actions:`, Object.keys(actions))

    if (names.length > 0 && index >= 0 && index < names.length && actions[names[index]]) {
      actions[names[index]].reset().fadeIn(0.5).play()
      // In the clean-up phase, fade it out
      return () => actions[names[index]].fadeOut(0.5)
    }
  }, [index, actions, names])

  return (
    <group ref={ref} {...props} dispose={null}>
      <group
        onPointerOver={() => setHovered(true)}
        onPointerOut={() => setHovered(false)}
        onClick={() => setIndex((index + 1) % names.length)}
        rotation={[Math.PI / 2, 0, 0]}
        scale={[0.01, 0.01, 0.01]}>
        <primitive object={nodes.Hips} />
        <skinnedMesh
          castShadow
          receiveShadow
          geometry={nodes.AvatarBody.geometry}
          skeleton={nodes.AvatarBody.skeleton}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={[100, 100, 100]}>
          <meshStandardMaterial map={texture} map-flipY={false} skinning />
        </skinnedMesh>
      </group>
      <a.mesh receiveShadow position={[0, 1, -1]} scale={scale}>
        <circleBufferGeometry args={[0.6, 64]} />
        <a.meshStandardMaterial color={color} />
      </a.mesh>
    </group>
  )
}
